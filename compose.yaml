services:
  app:
    build: .
    container_name: app
    env_file: ./.env
    ports:
      - 8080:${SERVER_PORT}
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
      goose:
        condition: service_completed_successfully
  kafka1:
    container_name: kafka1
    image: apache/kafka:4.1.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      start_period: 5s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - 9092:9092
    environment:
      KAFKA_NODE_ID: 1
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka1:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093, 2@kafka2:9093, 3@kafka3:9093
  kafka2:
    container_name: kafka2
    image: apache/kafka:4.1.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - 9093:9092
    environment:
      KAFKA_NODE_ID: 2
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka2:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093, 2@kafka2:9093, 3@kafka3:9093
  kafka3:
    container_name: kafka3
    image: apache/kafka:4.1.0
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "opt/kafka/bin/kafka-topics.sh --bootstrap-server localhost:9092 --list || exit 1"]
      start_period: 15s
      interval: 5s
      timeout: 10s
      retries: 10
    ports:
      - 9094:9092
    environment:
      KAFKA_NODE_ID: 3
      KAFKA_PROCESS_ROLES: broker,controller
      KAFKA_LISTENERS: PLAINTEXT://0.0.0.0:9092,CONTROLLER://0.0.0.0:9093
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka3:9092
      KAFKA_CONTROLLER_LISTENER_NAMES: CONTROLLER
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: CONTROLLER:PLAINTEXT,PLAINTEXT:PLAINTEXT
      KAFKA_CONTROLLER_QUORUM_VOTERS: 1@kafka1:9093, 2@kafka2:9093, 3@kafka3:9093
  kafka-init:
    container_name: kafka-init
    image: apache/kafka:4.1.0
    entrypoint: ["/bin/bash", "-c", "/create_topics.sh"]
    volumes:
      - type: bind
        source: ./create_topics.sh
        target: /create_topics.sh
    depends_on:
      kafka1:
        condition: service_healthy
      kafka2:
        condition: service_healthy
      kafka3:
        condition: service_healthy
    init: true
  kafka-ui:
    container_name: kafka-ui
    image: provectuslabs/kafka-ui:v0.7.2
    restart: unless-stopped
    ports:
      - ${KAFKA_UI_PORT}:8080
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka1:9092,kafka2:9092,kafka3:9092
      DYNAMIC_CONFIG_ENABLED: true
    depends_on:
      kafka-init:
        condition: service_completed_successfully
  postgres:
    container_name: postgres
    image: postgres:17
    env_file: .env
    environment: 
      POSTGRES_USER: ${POSTGRES_USER}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD}
      POSTGRES_DB: ${POSTGRES_NAME}
    ports:
      - "5432:${POSTGRES_PORT}"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${POSTGRES_USER} -d ${POSTGRES_NAME}"]
      interval: 10s
      timeout: 5s
      retries: 5
  goose:
    container_name: goose
    build:
      dockerfile: ./migrations/Dockerfile
    entrypoint: ["/bin/bash", "-c", "/entrypoint.sh"]
    volumes:
      - type: bind
        source: ./migrations/entrypoint.sh
        target: /entrypoint.sh
    env_file: .env
    depends_on:
      postgres:
        condition: service_healthy